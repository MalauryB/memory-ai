import Anthropic from "@anthropic-ai/sdk"
import { NextRequest, NextResponse } from "next/server"
import { createClientFromRequest } from "@/lib/supabase-server"
import { getUserContext, formatUserContextForAI, getUserRecommendations } from "@/lib/user-context"

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
})

// Mode mock pour tester sans appeler l'API
const USE_MOCK = process.env.USE_MOCK_AI === "true"

export async function POST(request: NextRequest) {
  try {
    const supabase = createClientFromRequest(request)

    // R√©cup√©rer l'utilisateur
    const {
      data: { user },
    } = await supabase.auth.getUser()

    const { title, description, category, startDate, deadline } = await request.json()

    if (!title || !description) {
      return NextResponse.json(
        { error: "Le titre et la description sont requis" },
        { status: 400 }
      )
    }

    // Si mode mock activ√©, retourner des donn√©es mock√©es
    if (USE_MOCK) {
      // Simuler un d√©lai d'API
      await new Promise((resolve) => setTimeout(resolve, 1500))

      const mockSteps = [
        {
          title: "Recherche et planification initiale",
          description: `Analyser en d√©tail les exigences du projet "${title}". Identifier les ressources n√©cessaires, √©tablir un calendrier pr√©liminaire et d√©finir les jalons principaux.`,
          estimatedDuration: "1-2 semaines",
        },
        {
          title: "Acquisition des comp√©tences de base",
          description: "Se former sur les fondamentaux n√©cessaires. Suivre des tutoriels, lire de la documentation et pratiquer avec des exercices simples.",
          estimatedDuration: "3-4 semaines",
        },
        {
          title: "Premi√®re mise en pratique",
          description: "R√©aliser un petit projet pilote pour appliquer les connaissances acquises. Identifier les points √† am√©liorer.",
          estimatedDuration: "2-3 semaines",
        },
        {
          title: "D√©veloppement des comp√©tences avanc√©es",
          description: "Approfondir les aspects plus complexes. Explorer les meilleures pratiques et les techniques avanc√©es du domaine.",
          estimatedDuration: "4-6 semaines",
        },
        {
          title: "Projet principal",
          description: "Travailler sur le projet principal qui d√©montre la ma√Ætrise des comp√©tences. It√©rer et am√©liorer continuellement.",
          estimatedDuration: "6-8 semaines",
        },
        {
          title: "Finalisation et optimisation",
          description: "Peaufiner les d√©tails, optimiser les performances, corriger les derniers bugs et pr√©parer la pr√©sentation finale.",
          estimatedDuration: "2-3 semaines",
        },
      ]

      return NextResponse.json({ steps: mockSteps })
    }

    // Calculer la p√©riode totale disponible si on a les dates
    let periodInfo = ""
    let totalDays = 0

    if (startDate && deadline) {
      const start = new Date(startDate)
      const end = new Date(deadline)
      totalDays = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))

      const months = Math.floor(totalDays / 30)
      const weeks = Math.floor(totalDays / 7)

      periodInfo = `
P√âRIODE TOTALE DISPONIBLE : ${totalDays} jours (environ ${weeks} semaines / ${months} mois)
Date de d√©but : ${start.toLocaleDateString("fr-FR")}
Date de fin : ${end.toLocaleDateString("fr-FR")}

‚ö†Ô∏è IMPORTANT : Les dur√©es estim√©es de TOUTES les √©tapes DOIVENT s'additionner pour correspondre approximativement √† ${totalDays} jours.
Distribue intelligemment le temps disponible entre les √©tapes en fonction de leur complexit√©.`
    } else if (deadline) {
      periodInfo = `Date limite : ${deadline} (analyse et propose des dur√©es coh√©rentes avec cette √©ch√©ance)`
    } else if (startDate) {
      periodInfo = `Date de d√©but : ${startDate} (propose des dur√©es r√©alistes pour chaque √©tape)`
    } else {
      periodInfo = "Aucune contrainte temporelle d√©finie (propose des dur√©es r√©alistes g√©n√©riques)"
    }

    // R√©cup√©rer le contexte utilisateur
    let userContextText = ""
    if (user) {
      const context = await getUserContext(supabase, user.id)
      const formattedContext = formatUserContextForAI(context)
      const recommendations = getUserRecommendations(context)

      if (formattedContext) {
        userContextText = `\nüìã CONTEXTE UTILISATEUR :\n${formattedContext}${recommendations}\n\n‚ö° IMPORTANT : Tiens compte de ce contexte pour adapter les √©tapes aux contraintes horaires, routines et cr√©neaux bloqu√©s de l'utilisateur.\n`
      }
    }

    const prompt = `Tu es un assistant expert en planification de projets et en d√©composition d'objectifs.
${userContextText}
Un utilisateur souhaite atteindre le projet suivant :

Titre : ${title}
Cat√©gorie : ${category || "Non sp√©cifi√©e"}
Description : ${description}

${periodInfo}

Ta t√¢che est de d√©composer ce projet en √©tapes concr√®tes, actionnables et r√©alistes. Pour chaque √©tape, fournis :
1. Un titre clair et concis
2. Une description d√©taill√©e de ce qu'il faut faire
3. Une estimation de dur√©e PR√âCISE en jours (ex: "14 jours", "30 jours", "7 jours")

${totalDays > 0 ? `
R√àGLES STRICTES pour les dur√©es :
- La SOMME totale des dur√©es doit √™tre proche de ${totalDays} jours (¬±10%)
- Exprime TOUJOURS les dur√©es en JOURS (pas de "semaines" ou "mois")
- R√©partis le temps intelligemment selon la complexit√© de chaque √©tape
- Les √©tapes pr√©paratoires sont g√©n√©ralement plus courtes
- Les √©tapes de mise en pratique sont g√©n√©ralement plus longues

Exemple de r√©partition pour ${totalDays} jours :
- Si tu as 5 √©tapes et ${totalDays} jours ‚Üí chaque √©tape fait en moyenne ${Math.round(totalDays / 5)} jours
- Ajuste ensuite selon la complexit√© : les √©tapes simples moins, les √©tapes complexes plus
` : `
- Exprime les dur√©es en jours pour plus de pr√©cision (ex: "14 jours" au lieu de "2 semaines")
`}

R√©ponds UNIQUEMENT avec un JSON valide suivant ce format exact (sans markdown, sans commentaires) :
{
  "steps": [
    {
      "title": "Titre de l'√©tape",
      "description": "Description d√©taill√©e de l'√©tape",
      "estimatedDuration": "X jours"
    }
  ]
}

G√©n√®re entre 4 et 8 √©tapes selon la complexit√© du projet. Assure-toi que les √©tapes suivent un ordre logique et progressif.`

    const message = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 2000,
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
    })

    // Extraire le texte de la r√©ponse
    const responseText = message.content[0].type === "text" ? message.content[0].text : ""

    // Parser le JSON de la r√©ponse
    let stepsData
    try {
      stepsData = JSON.parse(responseText)
    } catch (parseError) {
      console.error("Erreur de parsing JSON:", responseText)
      return NextResponse.json(
        { error: "Erreur lors de l'analyse de la r√©ponse de Claude" },
        { status: 500 }
      )
    }

    return NextResponse.json({ steps: stepsData.steps })
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration des √©tapes:", error)
    return NextResponse.json(
      { error: "Erreur lors de la g√©n√©ration des √©tapes" },
      { status: 500 }
    )
  }
}
