#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic du syst√®me...\n');

// 1. V√©rifier le port 3000
console.log('üì° PORT 3000:');
try {
  const output = execSync('ss -tulpn 2>/dev/null | grep :3000', { encoding: 'utf8' });
  console.log('‚ö†Ô∏è  Port 3000 OCCUP√â:');
  console.log(output);
} catch (e) {
  console.log('‚úì Port 3000 libre\n');
}

// 2. Lister les processus Node/Next
console.log('üñ•Ô∏è  PROCESSUS NODE/NEXT:');
try {
  const output = execSync('ps aux | grep -E "(node|next)" | grep -v grep | grep -v diagnose', { encoding: 'utf8' });
  const lines = output.trim().split('\n').filter(Boolean);
  if (lines.length > 0) {
    console.log(`‚ö†Ô∏è  ${lines.length} processus trouv√©s:`);
    lines.forEach(line => {
      const parts = line.trim().split(/\s+/);
      const pid = parts[1];
      const command = parts.slice(10).join(' ').substring(0, 80);
      console.log(`   PID ${pid}: ${command}`);
    });
  } else {
    console.log('‚úì Aucun processus Node/Next actif');
  }
} catch (e) {
  console.log('‚úì Aucun processus Node/Next actif');
}
console.log('');

// 3. V√©rifier les fichiers de cache
console.log('üìÅ CACHE:');
const cacheFiles = [
  '.next',
  'node_modules/.cache',
  '.turbo'
];

cacheFiles.forEach(file => {
  const fullPath = path.join(process.cwd(), file);
  if (fs.existsSync(fullPath)) {
    try {
      const stats = fs.statSync(fullPath);
      if (stats.isDirectory()) {
        const files = fs.readdirSync(fullPath);
        console.log(`‚ö†Ô∏è  ${file} existe (${files.length} fichiers)`);
      } else {
        console.log(`‚ö†Ô∏è  ${file} existe`);
      }
    } catch (e) {
      console.log(`‚ö†Ô∏è  ${file} existe (erreur lecture)`);
    }
  } else {
    console.log(`‚úì ${file} n'existe pas`);
  }
});
console.log('');

// 4. V√©rifier node_modules
console.log('üì¶ NODE_MODULES:');
const nodeModulesPath = path.join(process.cwd(), 'node_modules');
if (fs.existsSync(nodeModulesPath)) {
  try {
    const files = fs.readdirSync(nodeModulesPath);
    console.log(`‚úì node_modules existe (${files.length} packages)`);
  } catch (e) {
    console.log('‚ö†Ô∏è  node_modules existe mais erreur lecture');
  }
} else {
  console.log('‚ùå node_modules n\'existe pas - lancez "npm install"');
}
console.log('');

// 5. V√©rifier les variables d'environnement
console.log('üîê VARIABLES D\'ENVIRONNEMENT:');
const envFiles = ['.env', '.env.local', '.env.development', '.env.production'];
envFiles.forEach(file => {
  const fullPath = path.join(process.cwd(), file);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úì ${file} existe`);
  }
});
console.log('');

// 6. V√©rifier la version de Node
console.log('‚öôÔ∏è  VERSIONS:');
try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`‚úì Node.js: ${nodeVersion}`);
  console.log(`‚úì npm: ${npmVersion}`);
} catch (e) {
  console.log('‚ùå Erreur lors de la v√©rification des versions');
}
console.log('');

// 7. Recommandations
console.log('üí° RECOMMANDATIONS:');
try {
  execSync('ss -tulpn 2>/dev/null | grep :3000', { stdio: 'ignore' });
  console.log('‚ö†Ô∏è  Le port 3000 est occup√© ‚Üí Lancez "npm run clean" pour lib√©rer le port');
} catch (e) {
  // Port libre
}

const nextPath = path.join(process.cwd(), '.next');
if (fs.existsSync(nextPath)) {
  console.log('‚ö†Ô∏è  Le cache .next existe ‚Üí Lancez "npm run clean" pour nettoyer');
}

console.log('');
console.log('‚úÖ Diagnostic termin√©\n');
